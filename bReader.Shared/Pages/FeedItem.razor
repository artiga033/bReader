@page "/feeditem/{ItemPk:int}"
@inject IFeedService FeedService
@inject CommonJsInterop CommonJs
@using Humanizer

<FluentCard class="item-info">
    <a href="@(feedItemDto.Links.FirstOrDefault())"><h3>@feedItemDto.Title</h3></a>
    @if (feedItemDto.IsFavorite)
    {
        <FluentButton @onclick="async () => await SetCurrentItemNotFavoriteAsync()">
            <FluentIcon Name="star" Size=Microsoft.Fast.Components.FluentUI.IconSize.Size20 Filled=true UseAccentColor=false style="color:gold"></FluentIcon>
        </FluentButton>
    }
    else
    {
        <FluentButton @onclick="async ()=> await SetCurrentItemFavoriteAsync()">
            <FluentIcon Name="star" Size=Microsoft.Fast.Components.FluentUI.IconSize.Size20 Filled=false></FluentIcon>
        </FluentButton>
    }
    @foreach (var author in feedItemDto.Authors)
    {
        <a href="@author.Uri"><span class="text-secondary text-link">@($"{author.Name} <{author.Name}>")</span></a>
    }
    <span>
        <span title="发布时间">
            <FluentIcon Name="calendar_edit" Size=Microsoft.Fast.Components.FluentUI.IconSize.Size20 Filled=false />@feedItemDto.PublishDate.Humanize()
        </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        @if (feedItemDto.LastUpdatedTime != default(DateTimeOffset))
        {
            <span title="更新时间">
                <FluentIcon Name="calendar_clock" Size=Microsoft.Fast.Components.FluentUI.IconSize.Size20 Filled=false />@feedItemDto.LastUpdatedTime.Humanize()
            </span>
        }
    </span>
</FluentCard>
<br />
<FluentCard class="item-view">
    @((MarkupString)feedItemDto.Summary)
    <hr class="hr-fading-info" multiple />
    @((MarkupString)feedItemDto.Content)
</FluentCard>
@code {
    [CascadingParameter]
    public Func<Task> RefreshLayout { get; set; }
    [Parameter]
    public int ItemPk { get; set; }
    private FeedItemDto feedItemDto;
    private async Task SetCurrentItemFavoriteAsync()
    {
        await FeedService.SetItemsFavoriteAsync(new[] { feedItemDto.Pk });
        await RefreshLayout();
    }
    private async Task SetCurrentItemNotFavoriteAsync()
    {
        await FeedService.SetFeedsNotFavoriteAsync(new[] { feedItemDto.Pk });
        await RefreshLayout();
    }
    private async Task SetCurrentItemReadAsync()
    {
        await FeedService.SetItemsReadAsync(new[] { feedItemDto.Pk });
        await RefreshLayout();
    }
    private async Task SetCurrentItemNotReadAsync()
    {
        await FeedService.SetItemsNotReadAsync(new[] { feedItemDto.Pk });
        await RefreshLayout();
    }
    protected override async Task OnParametersSetAsync()
    {
        this.feedItemDto = await FeedService.GetFeedItemAsync(ItemPk);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetCurrentItemReadAsync();
        if (feedItemDto != null && feedItemDto.Title != null)
            await CommonJs.SetTitle(feedItemDto.Title);
    }
}
