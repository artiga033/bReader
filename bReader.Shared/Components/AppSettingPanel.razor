@using bReader.Shared.Utils
@inject ISettingService SettingService
<NumericTextField Label="RSS源更新周期(分钟)" @bind-Value="@AppSettings[SettingKeyMap.SourceUpdatePeriod]" @bind-Value:event="OnChange"></NumericTextField>
<NumericTextField Label="每页展示的Feeditem数" @bind-Value="@AppSettings[SettingKeyMap.PageSize]" @bind-Value:event="OnChange"></NumericTextField>
<PrimaryButton Text="保存设置" OnClick="async()=>await this.SaveSettingsAsync()"></PrimaryButton>
<Text style=@resultVisibility> <Icon IconName=@saveStatusIcon />@(saveSuccess?"保存成功":"保存失败")</Text>
@code {
    [CascadingParameter]
    public Func<Task> RefreshLayout { get; set; }
    private Dictionary<string, string> AppSettings { get; set; }
    private bool saveSuccess, savecomplete;
    private string saveStatusIcon => saveSuccess ? "CheckMark" : "ErrorBadge";
    private string resultVisibility => $"visibility:{(savecomplete ? "visible" : "hidden")}";
    protected async override Task OnInitializedAsync()
    {
        this.AppSettings = await SettingService.GetAllSettingsAsync();
        await base.OnInitializedAsync();
    }
    protected async Task SaveSettingsAsync()
    {
        saveSuccess = await SettingService.SaveSettingsAsync(AppSettings);
        savecomplete = true;
        await RefreshLayout();
    }
}
