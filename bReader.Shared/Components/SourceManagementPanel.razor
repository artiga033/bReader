@using System.Windows.Input
@inject IFeedService FeedService


<div>
    <FluentButton Appearance=Appearance.Accent @onclick="async () => await RefreshAllFeeds()" style="width:10em;align-self:flex-end;">刷新所有RSS源</FluentButton>
    <FluentProgress Paused=!feedRefreshing Value="feedRefreshPercent">@progressDescription</FluentProgress>
    <FluentToolbar>
        <FluentButton @onclick="AddCommand">新增</FluentButton>
    </FluentToolbar>
    <FluentDivider />
    <FluentCard>
        <FluentDataGrid GenerateHeader=GenerateHeaderOption.Default RowsData=Feeds ColumnDefinitions=feedGridColumns GridTemplateColumns="1fr 3fr 5fr 2fr 1fr">
            <HeaderCellTemplate>
                @context.Title
            </HeaderCellTemplate>
            <RowItemTemplate>
                <FluentDataGridRow TItem=FeedDto>
                    <FluentDataGridCell GridColumn=1>
                        @context.Pk
                    </FluentDataGridCell>
                    <FluentDataGridCell GridColumn=2>
                        @context.Title
                    </FluentDataGridCell>
                    <FluentDataGridCell GridColumn=3>
                        @context.SubscribeLink
                    </FluentDataGridCell>
                    <FluentDataGridCell GridColumn=4>
                        @context.Group.Name
                    </FluentDataGridCell>
                    <FluentDataGridCell GridColumn=5>
                        <FluentButton @onclick="async()=> await DeleteFeedAsync(context.Pk)"> <FluentIcon Name="delete" Size=Microsoft.Fast.Components.FluentUI.IconSize.Size20 Filled=false></FluentIcon></FluentButton>
                    </FluentDataGridCell>
                </FluentDataGridRow>
            </RowItemTemplate>
        </FluentDataGrid>
    </FluentCard>
    <FluentDialog Modal=true Hidden=@(!addDialogIsOpen)>
        <h1>新增订阅</h1>
        <br />
        <FluentTextField style="width:100%;" Placeholder="https://example.com/feed/" @bind-Value="this.FeedToAdd.SubscribeLink">订阅地址/URL</FluentTextField>
        <FluentDivider />
        <br />
        <FluentSwitch @bind-Checked="this.FeedToAdd.IsFavorite">设为收藏</FluentSwitch>
        <FluentDivider />
        <br />
        <div>
            <span>分组</span>
            <FluentSelect @bind-Value="GroupIdOfFeedToAdd" TValue=int>
                @foreach (var group in FeedGroups)
                    {
                <FluentOption Value=group.Id>@group.Name (@group.Id)</FluentOption>
                    }
            </FluentSelect>
        </div>
        <FluentDivider />
        <br />
        <FluentButton Appearance=Appearance.Accent @onclick="async ()=>  await AddFeedAsync(this.FeedToAdd,GroupIdOfFeedToAdd)">确定</FluentButton>
        <FluentButton @onclick="()=>this.addDialogIsOpen=false">取消</FluentButton>
    </FluentDialog>
</div>

@code {
    [CascadingParameter]
    public Func<Task> RefreshLayout { get; set; }
    [CascadingParameter]
    private ICollection<FeedGroupDto> FeedGroups { get; set; }
    private IEnumerable<Option<int>> FeedGroupsDropDownOption => FeedGroups.Select(x => new Option<int>() { Key = x.Id, Value = x.Id });

    bool addDialogIsOpen;
    private FeedCreateUpdateDto FeedToAdd = new();
    private int GroupIdOfFeedToAdd = -1;
    private List<ColumnDefinition<FeedDto>> feedGridColumns = new();

    System.Collections.Generic.List<FeedDto> Feeds => FeedGroups.GetAllFeeds();

    private Progress<int> feedRefreshCompleted = new();
    private decimal feedRefreshPercent;
    private string progressDescription = "";
    private bool feedRefreshing = false;

    protected override void OnInitialized()
    {
        this.feedRefreshCompleted.ProgressChanged += OnRefreshProgressChanged;
        feedGridColumns.Add(new ColumnDefinition<FeedDto>("ID", x => x.Pk));
        feedGridColumns.Add(new ColumnDefinition<FeedDto>("标题", x => x.Title));
        feedGridColumns.Add(new ColumnDefinition<FeedDto>("URL", x => x.SubscribeLink));
        feedGridColumns.Add(new ColumnDefinition<FeedDto>("分组", x => x.Group));
        feedGridColumns.Add(new ColumnDefinition<FeedDto>("操作", x => x.Pk));
        base.OnInitialized();
    }

    private async Task RefreshAllFeeds()
    {
        this.feedRefreshing = true;
        var t = FeedService.RefreshAllFeedsAsync(System.Threading.CancellationToken.None, feedRefreshCompleted);
        await t.ContinueWith((t) => this.progressDescription = "刷新成功").ContinueWith(t => this.feedRefreshing = false);
        await RefreshLayout();
    }

    private void OnRefreshProgressChanged(object? sender, int e)
    {
        this.feedRefreshPercent = (decimal)e / Feeds.Count;

        this.progressDescription = $"正在刷新rss源...{e}/{Feeds.Count}";
        StateHasChanged();
    }
    private async Task DeleteFeedAsync(int pk)
    {
        await FeedService.DeleteFeedAsync(pk);
        await RefreshLayout();
        //StateHasChanged();
    }
    private async Task AddFeedAsync(FeedCreateUpdateDto createDto, int groupId)
    {
        await FeedService.AddFeedAsync(createDto, groupId);
        await RefreshLayout();
        this.addDialogIsOpen = false;
    }
    private void AddCommand()
    {
        this.FeedToAdd = new();
        addDialogIsOpen = true;
        StateHasChanged();
    }
}
