@using BlazorFluentUI.Routing
@using BlazorFluentUI.Themes.Default

<Stack Horizontal="false" VerticalFill="false">
    <div class="top-row">
        <span class="navbar-toggler"><IconButton AriaLabel="NavCollapseIcon" IconName="GlobalNavButton" @onclick="ToggleNavMenu"></IconButton></span>
        <span style="color:darkcyan;text-align:center;">bReader</span>
        <span> <IconButton IconName="@themeIcon" @onclick="()=>SwitchTheme()"></IconButton></span>
    </div>
    <nav class="@NavMenuCssClass">
        <Nav>
            <div @onclick="ToggleNavMenu">
                <BlazorFluentUI.Routing.NavLink Name="首页" IconName="Home" Url=""></BlazorFluentUI.Routing.NavLink>
                <BlazorFluentUI.Routing.NavLink Name="选项" IconName="Settings" Url="settings"></BlazorFluentUI.Routing.NavLink>
            </div>
            <hr />
            <style>
                span.nav-content::after {
                    content: attr(data-unread);
                    background-color: var(--semanticColors-WarningBackground);
                    border-radius: 50% 50%;
                    padding: .2em .4em;
                    margin-left:1px;
                }
            </style>
            <NavLinkGroup Name="收藏" CollapseByDefault="false">
                <div @onclick="ToggleNavMenu">
                    @foreach (var fav in FavoriteFeeds)
                    {
                        //The CSS isolation won't apply on this string we define, that's, this span's class would be purely "nav-content",
                        //but the css,if written in "NavMenu.razor.css", would be conpiled to ".nav-content [randstr]",
                        //making us have no choice but write the style inline.
                        <BlazorFluentUI.Routing.NavLink Name="@($"<span class=\"nav-content\" data-unread={fav.UnreadCount}> {fav.Title} </span>")" Url=@($"feed/{fav.Pk}")></BlazorFluentUI.Routing.NavLink>
                    }
                </div>
            </NavLinkGroup>
            @foreach (var group in FeedGroups)
            {
                <NavLinkGroup Name="@group.Name" CollapseByDefault="true">
                    <div @onclick="ToggleNavMenu">
                        @foreach (var feed in group.Feeds)
                        {
                            <BlazorFluentUI.Routing.NavLink Name="@($"<span class=\"nav-content\" data-unread={feed.UnreadCount}> {feed.Title} </span>")" Url=@($"feed/{feed.Pk}")></BlazorFluentUI.Routing.NavLink>
                        }
                    </div>
                </NavLinkGroup>
            }
        </Nav>
    </nav>
</Stack>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    //[CascadingParameter]
    //private IEnumerable<FeedDto> FeedDtos { get; set; } = new List<FeedDto>();
    [CascadingParameter]
    private ICollection<FeedGroupDto> FeedGroups { get; set; }
    [CascadingParameter]
    private ICollection<FeedDto> FavoriteFeeds { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        customTheme = ThemeProvider?.Theme.Palette.GetType() == typeof(DefaultPaletteDark);
    }


    [Inject]
    public ThemeProvider? ThemeProvider { get; set; }
    private bool customTheme;
    private string? dark;
    private string themeIcon => customTheme ? "ClearNight" : "Sunny";
    private Task SwitchTheme()
    {
        customTheme = !customTheme;
        if (customTheme)
        {
            var palette = new DefaultPaletteDark();
            ThemeProvider?.UpdateTheme(palette, new DefaultSemanticColorsDark(palette), new DefaultSemanticTextColorsDark(palette));

            //dark = $"background-color: {ThemeProvider?.Theme.SemanticColors.BodyBackground}";

        }
        else
        {
            ThemeProvider?.UpdateTheme(new DefaultPalette());
            dark = "";
        }
        return Task.CompletedTask;
    }
}
